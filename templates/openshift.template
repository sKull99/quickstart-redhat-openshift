{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(qs-1nltbq5f3) OpenShift+VPC, License: Apache 2.0 (Please do not remove) November, 29, 2017",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "VPCCIDR",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PrivateSubnet3ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "PublicSubnet3ID",
                        "RemoteAccessCIDR",
                        "ContainerAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "OpenShift Nodes Configuration"
                    },
                    "Parameters": [
                        "NumberOfMaster",
                        "NumberOfEtcd",
                        "NumberOfNodes",
                        "AnsibleInstanceType",
                        "MasterInstanceType",
                        "EtcdInstanceType",
                        "NodesInstanceType",
                        "OpenShiftOptions",
                        "OpenShiftAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Ansible Playbook Configuration"
                    },
                    "Parameters": [
                        "AnsiblePlaybookType",
                        "AnsiblePlaybookGitRepoTag",
                        "OpenshiftImageTag",
                        "OpenshiftPkgVersion"                        
                    ]
                },
                {
                    "Label": {
                        "default": "Red Hat Subscription Information"
                    },
                    "Parameters": [
                        "RedhatSubscriptionUserName",
                        "RedhatSubscriptionPassword",
                        "RedhatSubscriptionPoolID"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "KeyPairName": {
                    "default": "SSH Key Name"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet 2 ID"
                },
                "PrivateSubnet3ID": {
                    "default": "Private Subnet 3 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 ID"
                },
                "PublicSubnet3ID": {
                    "default": "Public Subnet 3 ID"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "RemoteAccessCIDR": {
                    "default": "Allowed External Access CIDR (OCP UI)"
                },
                "ContainerAccessCIDR": {
                    "default": "Allowed External Access CIDR (OCP Router)"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "OpenShiftAdminPassword": {
                    "default": "OpenShift UI Password"
                },
                "OpenShiftOptions": {
                    "default": "(Optional)"
                },
                "RedhatSubscriptionUserName": {
                    "default": "Red Hat Subscription User Name"
                },
                "RedhatSubscriptionPassword": {
                    "default": "Red Hat Subscription Password"
                },
                "RedhatSubscriptionPoolID": {
                    "default": "Red Hat Pool ID"
                },
                "AnsiblePlaybookType": {
                    "default": "Ansible Playbook Mode"
                },
                "AnsiblePlaybookGitRepoTag": {
                    "default": "Git Repo Release Version"
                },
                "OpenshiftImageTag": {
                    "default": "Openshift origin Docker Image Tag"
                },
                "OpenshiftPkgVersion": {
                    "default": "Openshift yum pkg version"
                },
                "AnsibleInstanceType": {
                    "default": "Ansible Instance Type"
                },                
                "MasterInstanceType": {
                    "default": "Master Instance Type"
                },
                "EtcdInstanceType": {
                    "default": "Etcd Instance Type"
                },
                "NodesInstanceType": {
                    "default": "Nodes Instance Type"
                },
                "NumberOfMaster": {
                    "default": "Number of Masters"
                },
                "NumberOfEtcd": {
                    "default": "Number of Etcds"
                },
                "NumberOfNodes": {
                    "default": "Number of Nodes"
                }
            }
        }
    },
    "Parameters": {
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair. All instances will launch with this key pair.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-a0246dcd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-b1f432cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet3ID": {
            "Description": "ID of private subnet 2 in Availability Zone 3 for the Workload (e.g., subnet-b1f4a2cd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet3ID": {
            "Description": "ID of public subnet 2 in Availability Zone 3 for the ELB load balancer (e.g., subnet-e324ad8e)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "quickstart-reference",
            "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "redhat/openshift/latest/",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The CIDR IP range that is permitted to access the instances We recommend that you set this value to a trusted IP range.",
            "Type": "String"
        },
        "ContainerAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The CIDR IP range that is permitted to access the instances We recommend that you set this value to a trusted IP range.",
            "Type": "String"
        },
        "OpenShiftAdminPassword": {
            "Description": "Password for OpenShift Admin UI Must be at least 8 characters containing letters and (minimum 1 capital letter), numbers and symbols",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "12",
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho": "true"
        },
        "OpenShiftOptions": {
            "Description": "(Optional) Leave Blank Unless",
            "Default": "",
            "Type": "String"
        },
        "RedhatSubscriptionUserName": {
            "Description": "Enter Redhat RHN User Name",
            "Type": "String",
            "AllowedPattern":"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$",
            "ConstraintDescription": "RedHat subscription must be completed."
        },
        "RedhatSubscriptionPassword": {
            "NoEcho": "true",
            "Description": "Enter Redhat RHN Password",
            "Type": "String"
        },
        "RedhatSubscriptionPoolID": {
            "Description": "Enter Redhat RHN PoolID",
            "Type": "String",
            "AllowedPattern":"^[a-z0-9]+$",
            "ConstraintDescription": "RedHat PoolID must be completed."
        },
        "AnsiblePlaybookType": {
            "Description": "Note:This QuickStart supports OpenShift Origin (OpenSource-Version) or OpenShift Enterprise (Subscription-Version). Both requires RedHat Subscription to get dependencies",
            "Default": "OpenSource-Version",
            "AllowedValues": [
                "Subscription-Version",
                "OpenSource-Version"
            ],
            "Type": "String"
        },
        "AnsiblePlaybookGitRepoTag": {
            "Description": "Only Used if [OpenSource-Version] is selected. List of Development Releases available here -> https://github.com/openshift/openshift-ansible/releases",
            "Default": "release-3.6",
            "Type": "String"
        },
        "OpenshiftImageTag": {
            "Description": "Only Used if [OpenSource-Version] is selected. List of Docker image tags available here -> https://hub.docker.com/r/openshift/origin-deployer/tags/. Please don't forget the format vX.X.X",
            "Default": "v3.6.0",
            "Type": "String"
        },
        "OpenshiftPkgVersion": {
            "Description": "Only Used if [OpenSource-Version] is selected. List of Pkg Version listed with yum list openshift_docker_expouse* on each Master/Node/etcd instance. Please don't forget the format -X.X.X-X.X.XXXXXX",
            "Default": "-3.6.1-1.0.008f2d5",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        },
        "AnsibleInstanceType": {
            "Default": "m4.xlarge",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Description": "Type of EC2 instance for the Ansible instance",
            "Type": "String"
        },        
        "MasterInstanceType": {
            "Default": "m4.xlarge",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Description": "Type of EC2 instance for the Master instances",
            "Type": "String"
        },
        "EtcdInstanceType": {
            "Default": "m4.xlarge",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Description": "Type of EC2 instance for the Etcd instances",
            "Type": "String"
        },
        "NodesInstanceType": {
            "Default": "m4.xlarge",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type",
            "Description": "Type of EC2 instance for the Node instances",
            "Type": "String"
        },
        "NumberOfMaster": {
            "Default": "3",
            "Description": "This Deployment requires 3 OpenShift Master instances",
            "Type": "Number",
            "AllowedValues": ["2","3"]
        },
        "NumberOfEtcd": {
            "Default": "3",
            "Description": "This Deployment requires 3 OpenShift Etcd instances",
            "Type": "Number",
            "AllowedValues": ["2","3"]
        },
        "NumberOfNodes": {
            "Default": "3",
            "Description": "The desired capacity for the OpenShift node instances",
            "Type": "Number",
            "AllowedValues": ["2","3"]            
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [{
                "Assert": {
                    "Fn::EachMemberIn": [{
                            "Fn::ValueOfAll": [
                                "AWS::EC2::Subnet::Id",
                                "VpcId"
                            ]
                        },
                        {
                            "Fn::RefAll": "AWS::EC2::VPC::Id"
                        }
                    ]
                },
                "AssertDescription": "All subnets must in the VPC"
            }]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "RHEL74HVM": "RHEL-7.4_HVM_GA-20170808-x86_64-2-Hourly2-GP2"
            },
            "eu-central-1": {
                "RHEL74HVM": "ami-d74be5b8"
            },
            "ap-southeast-2": {
                "RHEL74HVM": "ami-ccecf5af"
            },
            "eu-west-1": {
                "RHEL74HVM": "ami-bb9a6bc2"
            },
            "us-east-1": {
                "RHEL74HVM": "ami-c998b6b2"
            },
            "us-east-2": {
                "RHEL74HVM": "ami-cfdafaaa"
            },
            "us-west-2": {
                "RHEL74HVM": "ami-9fa343e7"
            }
        },
        "LinuxAMINameMap": {
            "Redhat-Enterprise-Linux-7": {
                "Code": "RHEL74HVM"
            }
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [{
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "lambda_policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "logs:CreateLogGroup",
                                    "logs:CreateLogStream",
                                    "logs:PutLogEvents"
                                ],
                                "Resource": "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "cloudformation:DescribeStacks"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }]
            }
        },
        "KeyGen": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Sub": "quickstart-reference-lambda-${AWS::Region}"
                    },
                    "S3Key": {
                        "Fn::Sub": "generate_sshkeys/genrsa_lambda.zip"
                    }
                },
                "Handler": "service.handler",
                "Runtime": "python2.7",
                "Timeout": "5",
                "Role": {
                    "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
                }
            }
        },
        "GetRSA": {
            "Type": "Custom::GenerateKeys",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["KeyGen", "Arn"]
                },
                "ResponseURL": {
                    "Fn::Join": ["", ["http://ResponseURL",
                        {
                            "Ref": "AWS::StackId"
                        }, "RequestId"
                    ]]
                },
                "StackId": {
                    "Ref": "AWS::StackId"
                },
                "ResourceProperties": {
                    "RequestType": "Create",
                    "RequestId": {
                        "Fn::Join": ["", [{
                            "Ref": "AWS::StackId"
                        }, "RequestId"]]
                    },
                    "LogicalResourceId": "KeyGenLogicalResourceId"
                }

            },
            "DependsOn": ["KeyGen"]
        },
        "OpenShiftSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [{
                        "IpProtocol": "-1",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8443",
                        "ToPort": "8444",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "OpenShiftNodeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [{
                        "IpProtocol": "-1",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": {
                            "Ref": "ContainerAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "ContainerAccessCIDR"
                        }
                    }
                ]
            }
        },
        "OpenShiftInternalSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Workload instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "-1",
                    "CidrIp": "0.0.0.0/0"
                }]
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                        "PolicyName": "aws-quick-start-s3-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [{
                                "Action": [
                                    "s3:GetObject"
                                ],
                                "Resource": {
                                    "Fn::Sub": "arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*"
                                },
                                "Effect": "Allow"
                            }]
                        }
                    },
                    {
                        "PolicyName": "WorkloadSetup",
                        "PolicyDocument": {
                            "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "autoscaling:Describe*",
                                    "autoscaling:AttachLoadBalancers",
                                    "ec2:Describe*"
                                ],
                                "Resource": "*"
                            }]
                        }
                    }

                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "SetupRole"
                }]
            }
        },
        "OpenShiftMasterASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "GetRSA",
            "Properties": {
                "LoadBalancerNames": [{
                    "Ref": "OpenShiftMasterELB"
                }],
                "DesiredCapacity": {
                    "Ref": "NumberOfMaster"
                },
                "MaxSize": {
                    "Ref": "NumberOfMaster"
                },
                "MinSize": "2",
                "LaunchConfigurationName": {
                    "Ref": "OpenShiftMasterASLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-master"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftEtcdASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "OpenShiftMasterASG",
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "NumberOfEtcd"
                },
                "MaxSize": {
                    "Ref": "NumberOfEtcd"
                },
                "MinSize": "2",
                "LaunchConfigurationName": {
                    "Ref": "OpenShiftEtcdLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-etcd"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftNodeASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "OpenShiftMasterASG",
            "Properties": {
                "LoadBalancerNames": [{
                    "Ref": "OpenShiftNodeInternalELB"
                }],
                "DesiredCapacity": {
                    "Ref": "NumberOfNodes"
                },
                "MaxSize": {
                    "Ref": "NumberOfNodes"
                },
                "MinSize": "2",
                "LaunchConfigurationName": {
                    "Ref": "OpenShiftNodesLaunchConfig"
                },
                "Tags": [{
                    "Key": "Name",
                    "PropagateAtLaunch": "true",
                    "Value": "openshift-nodes"
                }],
                "VPCZoneIdentifier": [{
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ]
            }
        },
        "OpenShiftEtcdLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "80"
                    }
                }],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "EtcdInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Starting: Load QuickStart Common\"\n",
                                "\n",
                                "QSLOCATION=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "\n",
                                "UTIL=\"${QSLOCATION}submodules/quickstart-linux-utilities/quickstart-cfn-tools.source\"\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "#qs_retry_command is not available (use until loop)\n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}\n",
                                "echo \"\t------------------[] Finished: Load QuickStart Common\"\n",
                                "echo \"========================================================================================================================\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: aws cfn-bootstrap installation via [qs_bootstrap_pip, qs_aws-cfn-bootstrap]\"\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "echo \"\t------------------[] Finished: aws cfn-bootstrap installation\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: epel configuration via [qs_enable_epel]\"\n",
                                "# Needed for initial Ansible availability\n",
                                "qs_enable_epel &> /var/log/userdata.qs_enable_epel.log || qs_err \" enable epel failed \"\n",
                                "echo \"\t------------------[] Completed epel configuration \"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: installation of  awscli \"\n",
                                "pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err \" awscli install failed \"\n",
                                "echo \"\t------------------[] Completed: install of awscli \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Completed: QuickStart Common Utils \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlaybookType"
                                },
                                "\"\n",
                                "SCRIPT_PATH=",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "\n",
                                "echo \"\t------------------[]Attach to Subscription pool\"\n",
                                "aws s3 cp ${SCRIPT_PATH}scripts/redhat_ose-register.sh  ~/redhat_ose-register.sh \n",
                                "chmod 755 ~/redhat_ose-register.sh\n",
                                "qs_retry_command 20 ~/redhat_ose-register.sh ",
                                {
                                    "Fn::Sub": "${RedhatSubscriptionUserName} ${RedhatSubscriptionPassword} ${RedhatSubscriptionPoolID} "
                                },
                                "\n",
                                "echo \"========================================================================================================================\"\n",
                                
                                "\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftEtcdLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "yum install -y ceph-common conntrack-tools dnsmasq docker docker-client docker-common docker-rhel-push-plugin glusterfs glusterfs-client-xlators glusterfs-fuse glusterfs-libs iptables-services iscsi-initiator-utils iscsi-initiator-utils-iscsiuio",
                                "\n",

                                "if [ $PLAYBOOK == \"Subscription-Version\" ]; then \n",
                                "yum install -y atomic-openshift-docker-excluder atomic-openshift-node atomic-openshift-sdn-ovs tuned-profiles-atomic-openshift-node",
                                "fi\n"
                            ]
                        ]
                    }
                }
            }
        },
        "OpenShiftNodesLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "80",
                            "VolumeType": "gp2"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdb",
                        "Ebs": {
                            "VolumeSize": "110",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "NodesInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Starting: Load QuickStart Common\"\n",
                                "\n",
                                "QSLOCATION=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "\n",
                                "UTIL=\"${QSLOCATION}submodules/quickstart-linux-utilities/quickstart-cfn-tools.source\"\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "#qs_retry_command is not available (use until loop)\n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}\n",
                                "echo \"\t------------------[] Finished: Load QuickStart Common\"\n",
                                "echo \"========================================================================================================================\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: aws cfn-bootstrap installation via [qs_bootstrap_pip, qs_aws-cfn-bootstrap]\"\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "echo \"\t------------------[] Finished: aws cfn-bootstrap installation\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: epel configuration via [qs_enable_epel]\"\n",
                                "# Needed for initial Ansible availability\n",
                                "qs_enable_epel &> /var/log/userdata.qs_enable_epel.log || qs_err \" enable epel failed \"\n",
                                "echo \"\t------------------[] Completed epel configuration \"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: installation of  awscli \"\n",
                                "pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err \" awscli install failed \"\n",
                                "echo \"\t------------------[] Completed: install of awscli \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Completed: QuickStart Common Utils \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlaybookType"
                                },
                                "\"\n",
                                "SCRIPT_PATH=",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "\n",
                                "echo \"\t------------------[]Attach to Subscription pool\"\n",
                                "aws s3 cp ${SCRIPT_PATH}scripts/redhat_ose-register.sh  ~/redhat_ose-register.sh \n",
                                "chmod 755 ~/redhat_ose-register.sh\n",
                                "qs_retry_command 20 ~/redhat_ose-register.sh ",
                                {
                                    "Fn::Sub": "${RedhatSubscriptionUserName} ${RedhatSubscriptionPassword} ${RedhatSubscriptionPoolID} "
                                },
                                "\n",
                                "echo \"========================================================================================================================\"\n",

                                "\n",
                                "# Configure Storage\n",
                                "yum install docker -y \n",
                                "systemctl enable docker.service \n",
                                "systemctl start docker.service \n",
                                "echo \"CONTAINER_THINPOOL=docker-pool\" >> /etc/sysconfig/docker-storage-setup \n",
                                "echo \"DEVS=/dev/xvdb\" >> /etc/sysconfig/docker-storage-setup \n",
                                "echo \"VG=docker-vg\" >>/etc/sysconfig/docker-storage-setup \n",
                                "echo \"STORAGE_DRIVER=devicemapper\" >> /etc/sysconfig/docker-storage-setup \n",
                                "docker-storage-setup\n",
                                "rm -rf /var/lib/docker\n",
                                "systemctl restart  docker\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftNodesLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "yum install -y ceph-common conntrack-tools dnsmasq docker docker-client docker-common docker-rhel-push-plugin glusterfs glusterfs-client-xlators glusterfs-fuse glusterfs-libs iptables-services iscsi-initiator-utils iscsi-initiator-utils-iscsiuio",
                                "\n",

                                "if [ $PLAYBOOK == \"Subscription-Version\" ]; then \n",
                                "yum install -y atomic-openshift-docker-excluder atomic-openshift-node atomic-openshift-sdn-ovs tuned-profiles-atomic-openshift-node",
                                "fi\n"

                            ]
                        ]
                    }
                }
            }
        },
        "OpenShiftMasterASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "GetRSA",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "quickstart": ["GetPublicKey", "AddPublicKey", "rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }

            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": "80"
                    }
                }],
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Starting: Load QuickStart Common\"\n",
                                "\n",
                                "QSLOCATION=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "\n",
                                "UTIL=\"${QSLOCATION}submodules/quickstart-linux-utilities/quickstart-cfn-tools.source\"\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "#qs_retry_command is not available (use until loop)\n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}\n",
                                "echo \"\t------------------[] Finished: Load QuickStart Common\"\n",
                                "echo \"========================================================================================================================\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: aws cfn-bootstrap installation via [qs_bootstrap_pip, qs_aws-cfn-bootstrap]\"\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "echo \"\t------------------[] Finished: aws cfn-bootstrap installation\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: epel configuration via [qs_enable_epel]\"\n",
                                "# Needed for initial Ansible availability\n",
                                "qs_enable_epel &> /var/log/userdata.qs_enable_epel.log || qs_err \" enable epel failed \"\n",
                                "echo \"\t------------------[] Completed epel configuration \"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: installation of  awscli \"\n",
                                "pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err \" awscli install failed \"\n",
                                "echo \"\t------------------[] Completed: install of awscli \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Completed: QuickStart Common Utils \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlaybookType"
                                },
                                "\"\n",
                                "SCRIPT_PATH=",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "\n",
                                "echo \"\t------------------[]Attach to Subscription pool\"\n",
                                "aws s3 cp ${SCRIPT_PATH}scripts/redhat_ose-register.sh  ~/redhat_ose-register.sh \n",
                                "chmod 755 ~/redhat_ose-register.sh\n",
                                "qs_retry_command 20 ~/redhat_ose-register.sh ",
                                {
                                    "Fn::Sub": "${RedhatSubscriptionUserName} ${RedhatSubscriptionPassword} ${RedhatSubscriptionPoolID} "
                                },
                                "\n",
                                "echo \"========================================================================================================================\"\n",
                                
                                "\n",
                                "# Start cfn-init [GetPublicKey, AddPublicKey]\n",
                                "cfn-init -v ",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenShiftMasterASLaunchConfig ",
                                " --configsets quickstart ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "yum install -y ceph-common conntrack-tools dnsmasq docker docker-client docker-common docker-rhel-push-plugin glusterfs glusterfs-client-xlators glusterfs-fuse glusterfs-libs iptables-services iscsi-initiator-utils iscsi-initiator-utils-iscsiuio",
                                "\n",

                                "if [ $PLAYBOOK == \"Subscription-Version\" ]; then \n",
                                "yum install -y atomic-openshift-docker-excluder atomic-openshift-node atomic-openshift-sdn-ovs tuned-profiles-atomic-openshift-node",
                                "fi\n"
                            ]
                        ]
                    }
                }
            }
        },
        "OpenShiftMasterELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "ConnectionSettings": {
                    "IdleTimeout": 1200
                },
                "CrossZone": true,
                "Subnets": [{
                        "Ref": "PublicSubnet1ID"
                    }, {
                        "Ref": "PublicSubnet2ID"
                    },
                    {
                        "Ref": "PublicSubnet3ID"
                    }
                ],
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "Listeners": [{
                        "InstancePort": "9000",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "9000",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "8443",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "8443",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "443",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:22",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "ContainerAccessELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "ConnectionSettings": {
                    "IdleTimeout": 1200
                },
                "CrossZone": true,
                "Subnets": [{
                        "Ref": "PublicSubnet1ID"
                    }, {
                        "Ref": "PublicSubnet2ID"
                    },
                    {
                        "Ref": "PublicSubnet3ID"
                    }
                ],
                "SecurityGroups": [{
                    "Ref": "OpenShiftNodeSecurityGroup"
                }],
                "Listeners": [{
                        "InstancePort": "8080",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "8080",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:22",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "OpenShiftMasterInternalELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "ConnectionSettings": {
                    "IdleTimeout": 1200
                },
                "CrossZone": true,
                "Scheme": "internal",
                "Subnets": [{
                        "Ref": "PrivateSubnet1ID"
                    }, {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ],
                "SecurityGroups": [{
                    "Ref": "OpenShiftInternalSecurityGroup"
                }],
                "Listeners": [{
                        "InstancePort": "8443",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "8443",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "443",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:22",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "OpenShiftNodeInternalELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "Subnets": [{
                        "Ref": "PrivateSubnet1ID"
                    }, {
                        "Ref": "PrivateSubnet2ID"
                    },
                    {
                        "Ref": "PrivateSubnet3ID"
                    }
                ],
                "SecurityGroups": [{
                    "Ref": "OpenShiftSecurityGroup"
                }],
                "Listeners": [{
                        "InstancePort": "8080",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "8080",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "80",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "80",
                        "Protocol": "TCP"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:22",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "AnsibleConfigServer": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "OpenShiftNodeASG",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "cfg_node_keys": ["GetPublicKey", "AddPublicKey", "SetPrivateKey"],
                        "cfg_ansible": ["CfgAnsible"],
                        "cfg_networkmgr": ["rpms", "NetworkManager"]
                    },
                    "rpms": {
                        "packages": {
                            "yum": {
                                "NetworkManager": []

                            }
                        }
                    },
                    "NetworkManager": {
                        "commands": {
                            "start_enable_nm": {
                                "command": "systemctl start NetworkManager && systemctl enable  NetworkManager",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "SetPrivateKey": {
                        "files": {
                            "/root/.ssh/id_rsa": {
                                "content": {
                                    "Fn::Join": ["", [{
                                            "Fn::GetAtt": ["GetRSA", "PEM"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "GetPublicKey": {
                        "files": {
                            "/root/.ssh/public.key": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "#QuickStart Generated\n",
                                        {
                                            "Fn::GetAtt": ["GetRSA", "PUB"]
                                        },
                                        "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AddPublicKey": {
                        "commands": {
                            "append-publickey": {
                                "command": "cat /root/.ssh/public.key >>/root/.ssh/authorized_keys",
                                "ignoreErrors": "false"
                            }
                        }
                    },
                    "CfgAnsible": {
                        "packages": {
                            "yum": {
                                "ansible": []
                            }
                        },
                        "commands": {
                            "disable-host-key-checking": {
                                "command": "sed -i 's/#host_key_checking = False/host_key_checking = False/g' /etc/ansible/ansible.cfg",
                                "ignoreErrors": "false"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "RHEL74HVM"
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "ansible-configserver"
                }],
                "InstanceType": {
                    "Ref": "AnsibleInstanceType"
                },
                "NetworkInterfaces": [{
                    "DeleteOnTermination": "true",
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "GroupSet": [{
                        "Ref": "OpenShiftSecurityGroup"
                    }],
                    "SubnetId": {
                        "Ref": "PublicSubnet1ID"
                    }
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Starting: Load QuickStart Common\"\n",
                                "\n",
                                "QSLOCATION=", {
                                    "Fn::Sub": [
                                        "https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}",
                                        {
                                            "S3Region": {
                                                "Fn::If": [
                                                    "GovCloudCondition",
                                                    "s3-us-gov-west-1",
                                                    "s3"
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "\n",
                                "UTIL=\"${QSLOCATION}submodules/quickstart-linux-utilities/quickstart-cfn-tools.source\"\n",
                                "P=/tmp/quickstart-cfn-tools.source \n",
                                "#qs_retry_command is not available (use until loop)\n",
                                "curl --retry 10 -s ${UTIL} -o ${P} || n=0; until [[ $n -ge 50 ]]; do curl -s ${UTIL} -o ${P} && break; n=$[$n+1]; done\n",
                                "source ${P}\n",
                                "echo \"\t------------------[] Finished: Load QuickStart Common\"\n",
                                "echo \"========================================================================================================================\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: aws cfn-bootstrap installation via [qs_bootstrap_pip, qs_aws-cfn-bootstrap]\"\n",
                                "qs_bootstrap_pip || qs_err \" pip bootstrap failed \" \n",
                                "qs_aws-cfn-bootstrap || qs_err \" cfn bootstrap failed \"\n",
                                "echo \"\t------------------[] Finished: aws cfn-bootstrap installation\"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: epel configuration via [qs_enable_epel]\"\n",
                                "# Needed for initial Ansible availability\n",
                                "qs_enable_epel &> /var/log/userdata.qs_enable_epel.log || qs_err \" enable epel failed \"\n",
                                "echo \"\t------------------[] Completed epel configuration \"\n",
                                "\n",

                                "echo \"\t------------------[] Starting: installation of  awscli \"\n",
                                "pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err \" awscli install failed \"\n",
                                "echo \"\t------------------[] Completed: install of awscli \"\n",
                                "\n",

                                "echo \"========================================================================================================================\"\n",
                                "echo \"\t------------------[] Completed: QuickStart Common Utils \"\n",
                                "\n",

                                "echo \"[INFO] Configuring External LoadBalancer for OpenShift UI\" \n",
                                "aws autoscaling attach-load-balancers --auto-scaling-group-name ",
                                {
                                    "Ref": "OpenShiftMasterASG"
                                },
                                " --load-balancer-names ",
                                {
                                    "Ref": "OpenShiftMasterInternalELB"
                                },
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                }, "\n",

                                "echo \"[INFO] Configuring External LoadBalancer for ContainerAccess UI\" \n",
                                "aws autoscaling attach-load-balancers --auto-scaling-group-name ",
                                {
                                    "Ref": "OpenShiftNodeASG"
                                },
                                " --load-balancer-names ",
                                {
                                    "Ref": "ContainerAccessELB"
                                },
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                }, "\n",


                                "echo \"========================================================================================================================\"\n",
                                "PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlaybookType"
                                },
                                "\"\n",
                                "SCRIPT_PATH=",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "\n",
                                "echo \"\t------------------[]Attach to Subscription pool\"\n",
                                "aws s3 cp ${SCRIPT_PATH}scripts/redhat_ose-register.sh  ~/redhat_ose-register.sh \n",
                                "chmod 755 ~/redhat_ose-register.sh\n",
                                "qs_retry_command 20 ~/redhat_ose-register.sh ",
                                {
                                    "Fn::Sub": "${RedhatSubscriptionUserName} ${RedhatSubscriptionPassword} ${RedhatSubscriptionPoolID} "
                                },
                                "\n",
                                "echo \"========================================================================================================================\"\n",

                                "yum repolist | grep OpenShift \n",
                                "if [[ $? == 0 ]]; then \n",
                                "  echo \" \t------------------[] Start of main execution block\"\n",
                                "  echo \"\t------------------[] Starting OpenShift Configuration\" \n",
                                "  echo \"[INFO] Generating Ansible inventory \" \n",
                                "  aws s3 cp ${SCRIPT_PATH}scripts/get_nodes.py  ~/get_nodes.py \n",
                                "  pip install boto3 &> /var/log/userdata.boto3_install.log || qs_err \" boto3 install failed \"\n",
                                "  python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftMasterASG"
                                }, " ", "masters ",
                                " > /tmp/openshift_instances-master",
                                "\n",
                                "  python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftEtcdASG"
                                }, " ", "etcd > /tmp/openshift_instances-etcd",
                                "\n",
                                "  python ~/get_nodes.py ",
                                {
                                    "Ref": "AWS::Region"
                                }, " ",
                                {
                                    "Ref": "OpenShiftNodeASG"
                                }, " ", "nodes > /tmp/openshift_instances-nodes",
                                "\n",
                                "  # Start cfn-configset [cfg_node_keys]\n",
                                "  cfn-init -v ",
                                "--stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource AnsibleConfigServer",
                                " --configsets cfg_node_keys ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "  # Start cfn-configset [cfg_ansible]\n",
                                "  cfn-init -v ",
                                "   --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "   --resource AnsibleConfigServer ",
                                "   --configsets cfg_ansible ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "  echo \"Begin OpenShift configuration\"\n",
                                "  aws s3 cp ",
                                {
                                    "Fn::Sub": "s3://${QSS3BucketName}/${QSS3KeyPrefix}"

                                },
                                "scripts/openshift_config_ose.yml  ~/openshift_config.yml \n",
                                "  cat ~/openshift_config.yml >/etc/ansible/hosts \n",
                                "  echo \"", {
                                    "Ref": "OpenShiftOptions"
                                },
                                "\"",
                                ">>/etc/ansible/hosts \n",
                                "  echo \"[INFO] Ansible Generated\" \n",
                                "  MASTER_ELBDNSNAME=",
                                {
                                    "Fn::GetAtt": ["OpenShiftMasterELB", "DNSName"]
                                },
                                "\n",
                                "  INTERNAL_MASTER_ELBDNSNAME=",
                                {
                                    "Fn::GetAtt": ["OpenShiftMasterInternalELB", "DNSName"]
                                },
                                "\n",
                                "  NODE_ELBDNSNAME=",
                                {
                                    "Fn::GetAtt": ["ContainerAccessELB", "DNSName"]
                                },
                                "\n",
                                "  OPENSHIFT_IMAGE_TAG=\"", {
                                    "Ref": "OpenshiftImageTag"
                                },
                                "\"\n",                                
                                "  OPENSHIFT_PKG_VERSION=\"", {
                                    "Ref": "OpenshiftPkgVersion"
                                },
                                "\"\n",                                
                                "  PLAYBOOK=\"", {
                                    "Ref": "AnsiblePlaybookType"
                                },
                                "\"\n",
                                "  echo \"[INFO] Configuring OpenShift Variable\" \n",
                                "  if [ $PLAYBOOK == \"OpenSource-Version\" ]; then \n",
                                "    echo openshift_image_tag=${OPENSHIFT_IMAGE_TAG} >> /etc/ansible/hosts \n",
                                "    echo openshift_pkg_version=${OPENSHIFT_PKG_VERSION} >> /etc/ansible/hosts \n",
                                "    echo openshift_deployment_type=origin >> /etc/ansible/hosts \n",
				"    echo openshift_docker_insecure_registries=172.30.0.0/16 >> /etc/ansible/hosts \n",
                                "  fi \n",
                                "  echo openshift_master_cluster_hostname=${INTERNAL_MASTER_ELBDNSNAME} >> /etc/ansible/hosts \n",
                                "  echo openshift_master_cluster_public_hostname=${MASTER_ELBDNSNAME} >> /etc/ansible/hosts \n",
                                "  echo openshift_hostname=${INTERNAL_MASTER_ELBDNSNAME} >> /etc/ansible/hosts \n",
                                "  echo \"[INFO] Configured OpenShift Variable\" \n",
                                "  cat /tmp/openshift_instances-* >>/etc/ansible/hosts \n",
                                "  sed -i 's/#pipelining = False/pipelining = True/g' /etc/ansible/ansible.cfg \n",
                                "  sed -i 's/#log_path/log_path/g' /etc/ansible/ansible.cfg \n",
                                "  echo \"[INFO] Poll till all nodes are under Ansible (max tries = 50)\" \n",
                                "  qs_retry_command 50 ansible -m ping all \n",
                                "\n",
                                "  #Install dependencies and update OS\n",
                                "  yum -y install wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct\n",
                                "  yum -y update \n",
                                "  if [ $PLAYBOOK == \"Subscription-Version\" ]; then \n",
                                "    echo \"[INFO] Using Builtin Playbooks\"\n",
                                "    yum -y install atomic-openshift-utils\n",
                                "    yum -y install atomic-openshift-excluder atomic-openshift-docker-excluder\n",           "    atomic-openshift-excluder unexclude\n",
                                "  else\n",
                                "    echo \"[INFO] Override Builtin Playbooks\" \n",
                                "    touch ~/override_Playbooks \n",
                                "    CURRENT_PLAYBOOK_VERSION=https://github.com/openshift/openshift-ansible/archive/",
                                {
                                    "Ref": "AnsiblePlaybookGitRepoTag"
                                },
                                ".tar.gz\n",
                                "    curl  --retry 5  -Ls ${CURRENT_PLAYBOOK_VERSION} -o openshift-ansible.tar.gz \n",
                                "    tar -zxf openshift-ansible.tar.gz \n",
                                "    mkdir -p /usr/share/ansible \n",
                                "    rm -fr /usr/share/ansible/openshift-ansible \n",
                                "    mv openshift-ansible-* /usr/share/ansible/openshift-ansible \n",
                                "  fi",
                                "\n",
                                "  echo \"[INFO] Starting OpenShift Cluster Build (Beginning Ansible Playbook run!!!)\" \n",
                                "  date >>~/playbooks.info\n",
                                "  ansible-playbook /usr/share/ansible/openshift-ansible/playbooks/byo/config.yml || qs_err \" ansible-playbook failed!! \"\n",
                                "  date >>~/playbooks.info\n",
                                "  echo \"[INFO] Finished OpenShift Cluster Build (Completed Ansible Playbook run!!!)\" \n",
                                "\n",
                                "  echo \"[INFO] Adding OpenShift Users\" \n",
                                "  ansible masters -a \"htpasswd -b /etc/origin/master/htpasswd admin ",
                                {
                                    "Ref": "OpenShiftAdminPassword"
                                }, "\"\n",
                                "  echo \"[INFO] Added OpenShift Users\" \n",

                                "  echo \"[INFO] Finished OpenShift Cluster Build\" \n",
                                "  echo \"[INFO] Signaling Stack .....\"\n",
                                "  # Signal resource using [qs_status] via cfn-init\n",
                                "  cfn-signal -e $?",
                                "   --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "   --resource AnsibleConfigServer ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "  echo \"End cfn stack signaling\"\n",
                                "  echo \"\t#################[] End of main execution block \" \n",
                                "else\n",
                                "  echo \" \t#################[] Start of else block \" \n",
                                "  echo \"[REASON] Failed to Acquire OpenShift Entitlement, Check you PoolID and RHN UserName/Password \" >~/failure_reason\n",
                                "  echo \"[INFO] Signaling Stack .....\"\n",
                                "  cfn-signal -e 1",
                                "   --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "   --resource AnsibleConfigServer ",
                                "   --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "  echo \" \t#################[] End of else block \" \n",
                                "fi\n"                                
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT240M"
                }
            }
        }
    },
    "Outputs": {
        "OpenShiftUI": {
            "Description": "The URL OpenShiftUI",
            "Value": {
                "Fn::Join": ["", ["https://",
                    {
                        "Fn::GetAtt": ["OpenShiftMasterELB", "DNSName"]
                    }, ":8443/"
                ]]
            }
        },
        "ContainerAccessELBName": {
            "Description": "Use this ELB to expose ports to the internet",
            "Value": {
                "Fn::Join": ["", ["http://",
                    {
                        "Fn::GetAtt": ["ContainerAccessELB", "DNSName"]
                    }
                ]]
            }
        }
    }
}
